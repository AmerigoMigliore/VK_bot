import random
import json
import threading
from vk_auth import vk_session, VkBotEventType
from keyboard import *
from data import game_math_stats, game_math_top, users_info, change_class


def create_keyboard(nums):
    return str(json.dumps(
        {
            "inline": True,
            "buttons": [
                [get_callback_button(f'{nums[0]}', 'positive', {"method": "GameMath.game", "args": nums[0]}),
                 get_callback_button(f'{nums[1]}', 'positive', {"method": "GameMath.game", "args": nums[1]})],

                [get_callback_button(f'{nums[2]}', 'positive', {"method": "GameMath.game", "args": nums[2]}),
                 get_callback_button(f'{nums[3]}', 'positive', {"method": "GameMath.game", "args": nums[3]})]
            ]
        },
        ensure_ascii=False))


def plus(rand_min, rand_max):
    a = random.randint(rand_min, rand_max)
    b = random.randint(rand_min, rand_max)
    return [a, b, a + b]


def minus(rand_min, rand_max):
    a = random.randint(rand_min, rand_max)
    b = random.randint(rand_min, rand_max)
    return [a, b, a - b]


def multiplication(rand_min, rand_max):
    a = random.randint(rand_min, rand_max)
    b = random.randint(rand_min, rand_max)
    return [a, b, a * b]


def division(rand_min, rand_max):
    a = random.randint(rand_min, rand_max)
    b = random.randint(rand_min, rand_max)
    return [a * b, a, b]


def get_points(gamer):
    return gamer[1]


class GameMath:
    texts = None
    game_levels = None
    start_keyboard = None
    end_keyboard_without_lives = None
    end_keyboard_with_lives = None
    end_keyboard = None
    continue_game_keyboard = None
    timers = {}

    def __init__(self):
        self.texts = [  # TODO: –ü–æ–º–µ–Ω—è—Ç—å –Ω–∞ —á—Ç–æ-—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
            # 0
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –º–∞—Ç–µ–º–∞—Ç–∏–∫ –≤–µ–ª–∏–∫–∏–π! –°—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É –∑–∞—Ö–æ—Ç–µ–ª —Å–æ –º–Ω–æ–π?',
            # 1
            '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: —è –¥–∞—é —Ç–µ–±–µ –ø—Ä–∏–º–µ—Ä, 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –∏ 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è.\n'
            '–£—Å–ø–µ–µ—à—å –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - –ø–æ–ª—É—á–∏—à—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä.\n'
            '–ù–µ —É—Å–ø–µ–µ—à—å - –∏–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n\n'
            '–í –∏–≥—Ä–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Ä–æ–≤–Ω–µ–π, –∏ –∫–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –≤–Ω–æ—Å–∏—Ç —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤.\n'
            '–ú–µ–∂–¥—É —É—Ä–æ–≤–Ω—è–º–∏ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤—Ä–µ–º—è –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤.\n'
            '–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–¥—ã—Ö–∞—Ç—å —Å–µ–∫—É–Ω–¥ 10-20, —á—Ç–æ–±—ã –æ—Å–≤–µ–∂–∏—Ç—å —Å–≤–æ–π —Ä–∞–∑—É–º.'
            '–ù—É, –∏ —á—Ç–æ–±—ã —è —É—Å–ø–µ–ª —Å–æ—Å—Ç–∞–≤–∏—Ç—å –µ—â–µ –ø—Ä–∏–º–µ—Ä—á–∏–∫–æ–≤!\n\n'
            '–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å ‚ù§, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É —Å –º–æ–º–µ–Ω—Ç–∞ —Å–≤–æ–µ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è!\n'
            '–ë–æ–Ω—É—Å –¥–ª—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: 5‚ù§.\n'
            '–ó–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –∫–∞–∂–¥—ã—Ö 15 –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (15, 30, 45, ...) —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 3‚ù§ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∏–≥—Ä—ã.\n'
            '–ó–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 5 —É—Ä–æ–≤–Ω—è –∏ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—ã –ø–æ–ª—É—á–∏—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ ‚ù§.\n\n'
            '–ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ - –∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–≥–Ω–∞–ª–∏!',
            # 2
            '–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!']

        self.game_levels = {
            0: {"min": 0, "max": 10, "actions": [plus]},
            1: {"min": 0, "max": 20, "actions": [plus]},
            2: {"min": 0, "max": 50, "actions": [plus]},

            3: {"min": 0, "max": 5, "actions": [multiplication]},
            4: {"min": 0, "max": 10, "actions": [multiplication]},
            5: {"min": 0, "max": 20, "actions": [multiplication]},

            6: {"min": 0, "max": 10, "actions": [minus]},
            7: {"min": 0, "max": 20, "actions": [minus]},
            8: {"min": 0, "max": 50, "actions": [minus]},

            9: {"min": 0, "max": 5, "actions": [division]},
            10: {"min": 0, "max": 10, "actions": [division]},
            11: {"min": 0, "max": 20, "actions": [division]},

            12: {"min": -10, "max": 10, "actions": [plus]},
            13: {"min": -20, "max": 20, "actions": [plus]},
            14: {"min": -50, "max": 50, "actions": [plus]},

            15: {"min": -5, "max": 5, "actions": [multiplication]},
            16: {"min": -10, "max": 10, "actions": [multiplication]},
            17: {"min": -20, "max": 20, "actions": [multiplication]},

            18: {"min": -10, "max": 10, "actions": [minus]},
            19: {"min": -20, "max": 20, "actions": [minus]},
            20: {"min": -50, "max": 50, "actions": [minus]},

            21: {"min": -5, "max": 5, "actions": [division]},
            22: {"min": -10, "max": 10, "actions": [division]},
            23: {"min": -20, "max": 20, "actions": [division]},

            24: {"min": 100, "max": 150, "actions": [plus, minus]},
            25: {"min": 100, "max": 200, "actions": [plus, minus]},
            26: {"min": 100, "max": 300, "actions": [plus, minus]},

            27: {"min": 0, "max": 50, "actions": [multiplication, division]},
            28: {"min": 0, "max": 100, "actions": [multiplication, division]},
            29: {"min": 0, "max": 150, "actions": [multiplication, division]},

            30: {"min": 1000, "max": 5000, "actions": [plus, minus, multiplication, division]},
        }

        self.start_keyboard = str(json.dumps(
            {
                "one_time": True,
                "buttons": [
                    [get_text_button('–ü—Ä–∞–≤–∏–ª–∞', 'primary'), get_text_button('–ù–∞—á–∞—Ç—å', 'positive')],
                    [get_text_button('–û–±–º–µ–Ω—è—Ç—å 5‚ù§ –Ω–∞ 1üí∞', 'primary')],
                    [get_text_button('–†–µ–π—Ç–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', 'secondary')],
                    [get_text_button('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'negative')]
                ]
            },
            ensure_ascii=False))

        self.end_keyboard = str(json.dumps({
                "one_time": False,
                "buttons": [
                    [get_text_button('!–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã', 'primary'), get_text_button('!–í—Å–µ –∫–æ–º–∞–Ω–¥—ã', 'primary')]
                ]
            }, ensure_ascii=False))

        self.end_keyboard_without_lives = str(json.dumps(
            {
                "inline": True,
                "buttons": [
                    [get_text_button('–ù–æ–≤–∞—è –∏–≥—Ä–∞', 'primary'), get_text_button('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'negative')],
                    [get_text_button('–†–µ–π—Ç–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', 'secondary')]
                ]
            },
            ensure_ascii=False))

        self.end_keyboard_with_lives = str(json.dumps(
            {
                "inline": True,
                "buttons": [
                    [get_callback_button('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ‚ù§', 'positive', {"method": "GameMath.use_lives", "args": None})],
                    [get_text_button('–ù–æ–≤–∞—è –∏–≥—Ä–∞', 'primary'), get_text_button('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'negative')],
                    [get_text_button('–†–µ–π—Ç–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏', 'secondary')]
                ]
            },
            ensure_ascii=False))

        self.continue_game_keyboard = str(json.dumps(
            {
                "inline": True,
                "buttons": [
                    [get_text_button('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', 'positive')]
                ]
            },
            ensure_ascii=False))

    def process_event(self, event):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"

        :param event: —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–∏—à–µ–¥—à–µ–µ –≤ VkBotLongPoll
        :type event: :class:`Event`
        """
        if event is None:
            return

        if event.type == VkBotEventType.MESSAGE_EVENT:
            user_id = str(event.obj.user_id)

            method = event.obj.payload.get('method')
            if method == "GameMath.game":
                if self.cancel_timer(user_id):
                    self.game(user_id, event.obj.payload.get('args'))
            elif method == "GameMath.use_lives":
                self.use_live(user_id)

            vk_session.method('messages.sendMessageEventAnswer',
                              {'event_id': event.obj.event_id,
                               'user_id': int(user_id),
                               'peer_id': event.obj.peer_id})

        elif event.type == VkBotEventType.MESSAGE_NEW:
            user_id = str(event.obj.from_id)
            message = event.obj.text.lower()

            if message == '–Ω–∞—á–∞—Ç—å' or message == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å':
                self.cancel_timer(user_id)
                self.game(user_id, message)
            elif message == '–Ω–æ–≤–∞—è –∏–≥—Ä–∞':
                self.cancel_timer(user_id)
                self.start(user_id)
            elif message == '–ø—Ä–∞–≤–∏–ª–∞':
                self.rules(user_id)
            elif message == '—Ä–µ–π—Ç–∏–Ω–≥ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏':
                self.get_top(user_id)
            elif message == '–∑–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É':
                self.end(user_id, True)
            elif message == '–æ–±–º–µ–Ω—è—Ç—å 5‚ù§ –Ω–∞ 1üí∞':
                self.exchange_lives_for_balance(user_id)
            else:
                self.end(user_id)

    def start(self, user_id):
        user_id = str(user_id)
        if game_math_stats.get(user_id) is None:
            # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∏—Ä–æ–∫–∞
            game_math_stats.update({user_id: {'is_active': True, 'lives': 5, 'answer': None, 'score': 0}})
        else:
            # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã —Å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∏–≥—Ä–æ–∫–æ–º
            game_math_stats.update({user_id: {'is_active': True, 'lives': game_math_stats.get(user_id).get('lives'),
                                              'answer': None, 'score': 0}})

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': self.texts[0] +
                              f'\n–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§',
                           'random_id': 0, 'keyboard': self.start_keyboard})

    def end(self, user_id, back=False):
        user_id = str(user_id)
        self.cancel_timer(user_id)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞, –µ—Å–ª–∏ –Ω–∞–¥–æ
        if game_math_stats.get(user_id, {}).get('score', 0) > game_math_top.get(user_id, {}).get('record', 0):
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∂–∏–∑–Ω–µ–π, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–∏–ª –ª–∏—á–Ω—ã–π —Ä–µ–∫–æ—Ä–¥, –Ω–æ >= 15 –æ—á–∫–æ–≤
            for score in range(15, game_math_stats.get(user_id).get('score'), 15):
                if game_math_top.get(user_id, {}).get('record', 0) < score:
                    game_math_stats[user_id]['lives'] += 3
                    vk_session.method('messages.send',
                                      {'user_id': int(user_id),
                                       'message': f'–í—ã –≤–ø–µ—Ä–≤—ã–µ –¥–∞–ª–∏ –±–æ–ª–µ–µ {score} –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ 3‚ù§!\n'
                                                  f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§',
                                       'random_id': 0})

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –∏–≥—Ä–æ–∫–∞
            user = vk_session.method('users.get', {'user_ids': int(user_id)})[0]
            name = f"{user.get('first_name')} {user.get('last_name')}"

            # –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥
            game_math_top.update({user_id: {'name': name, 'record': game_math_stats.get(user_id).get('score')}})

        if back:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É
            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n–ü–æ–º–Ω–∏, —á—Ç–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–±–∏—Ç—å —Å–≤–æ–π —Ä–µ–∫–æ—Ä–¥!',
                               'random_id': 0, 'keyboard': self.end_keyboard})

            game_math_stats[user_id]['score'] = 0
            change_class(user_id, 'autoresponder')

        elif game_math_stats.get(user_id).get('lives') > 0 and game_math_stats.get(user_id).get('is_active'):
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∂–∏–∑–Ω–∏
            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': f'–í—ã –¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {game_math_stats.get(user_id).get("score")}\n'
                                          f'–í–∞—à —Ä–µ–∫–æ—Ä–¥: {game_math_top.get(user_id).get("record")}\n'
                                          f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§\n'
                                          f'–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?',
                               'random_id': 0, 'keyboard': self.end_keyboard_with_lives})
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –∂–∏–∑–Ω–µ–π
            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': f'–í—ã –¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {game_math_stats.get(user_id).get("score")}\n'
                                          f'–í–∞—à —Ä–µ–∫–æ—Ä–¥: {game_math_top.get(user_id).get("record")}\n'
                                          f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§\n'
                                          f'–°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?',
                               'random_id': 0, 'keyboard': self.end_keyboard_without_lives})

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π
        game_math_stats[user_id]['is_active'] = False
        game_math_stats[user_id]['answer'] = None

    def rules(self, user_id):
        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': self.texts[1],
                           'random_id': 0, 'keyboard': self.start_keyboard})

    def game(self, user_id, answer):
        user_id = str(user_id)
        answer = str(answer)

        self.cancel_timer(user_id)

        if not game_math_stats.get(user_id).get('is_active'):
            if answer == "":
                self.start(user_id)
            return

        # –ï—Å–ª–∏ –¥–∞–Ω–æ –∫—Ä–∞—Ç–Ω–æ 5 –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ -> –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
        if answer == "" and game_math_stats.get(user_id).get('score') % 5 == 0:

            if game_math_stats.get(user_id).get('score') >= 25:
                game_math_stats[user_id]['lives'] += 1
                vk_session.method('messages.send',
                                  {'user_id': int(user_id),
                                   'message': f'–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –±–æ–ª—å—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ ‚ù§!\n'
                                              f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§',
                                   'random_id': 0})

            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': f'–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å {game_math_stats.get(user_id).get("score") // 5}\n'
                                          f'–†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–¥–æ—Ö–Ω—É—Ç—å 10-20 —Å–µ–∫—É–Ω–¥!',
                               'random_id': 0, 'keyboard': self.continue_game_keyboard})

        # –ï—Å–ª–∏ –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∫–∞–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ -> —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
        elif game_math_stats.get(user_id).get('answer') is None:
            self.new_formula(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
        elif str(game_math_stats.get(user_id).get('answer')) == answer:
            game_math_stats.update(
                {user_id: {'is_active': True, 'lives': game_math_stats.get(user_id).get('lives'),
                           'answer': None, 'score': game_math_stats.get(user_id).get('score') + 1}})
            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': f'–í–∞—à –æ—Ç–≤–µ—Ç "{answer}" –≤–µ—Ä–Ω—ã–π!\n'
                                          f'–í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: "{game_math_stats.get(user_id).get("score")}"!',
                               'random_id': 0})
            self.game(user_id, "")

        # –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
        else:
            vk_session.method('messages.send',
                              {'user_id': int(user_id),
                               'message': f'–í–∞—à –æ—Ç–≤–µ—Ç "{answer}" –Ω–µ–≤–µ—Ä–Ω—ã–π!\n'
                                          f'–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: "{game_math_stats.get(user_id).get("answer")}"!',
                               'random_id': 0})
            self.end(user_id)

    def new_formula(self, user_id):
        symbol = ""
        level = game_math_stats.get(user_id).get("score") // 5  # 5 –ø—Ä–∏–º–µ—Ä–æ–≤ –Ω–∞ –∫–∞–∂–¥–æ–º —É—Ä–æ–≤–Ω–µ
        if level >= len(self.game_levels):
            level = len(self.game_levels) - 1
        rand_min = self.game_levels.get(level).get("min")
        rand_max = self.game_levels.get(level).get("max")

        action = random.choice(self.game_levels.get(level).get("actions"))
        if action == plus:
            symbol = '+'
        elif action == minus:
            symbol = '-'
        elif action == multiplication:
            symbol = '*'
        elif action == division:
            symbol = '/'
        formula = action(rand_min, rand_max)
        num2 = num3 = num4 = res = formula[2]

        while num2 == res or num3 == res or num4 == res or num2 == num3 or num2 == num4 or num3 == num4:
            num2 = random.randint(res - 10, res + 10)
            num3 = random.randint(res - 10, res + 10)
            num4 = random.randint(res - 10, res + 10)

        nums = [res, num2, num3, num4]
        random.shuffle(nums)

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': "–£—Ä–æ–≤–µ–Ω—å {}\n–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç {} {} {}?"
                                                    .format(str(level), formula[0], symbol, formula[1]),
                           'random_id': 0, 'keyboard': create_keyboard(nums)})

        game_math_stats.update(
            {user_id: {'is_active': True, 'lives': game_math_stats.get(user_id).get('lives'),
                       'answer': res, 'score': game_math_stats.get(user_id).get('score')}})

        self.start_timer(user_id)

    def start_timer(self, user_id):
        self.timers.update({user_id: threading.Timer(5, self.end, {user_id})})
        self.timers.get(user_id).start()

    def cancel_timer(self, user_id):
        if self.timers.get(user_id) is not None:
            self.timers.get(user_id).cancel()
            return True
        return False

    def use_live(self, user_id):
        """ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã.
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∂–∏–∑–Ω–µ–π, –∑–∞–ø—Ä–æ—Å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è.

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.
        :type user_id: int –∏–ª–∏ str.

        :return: None.
        """
        user_id = str(user_id)
        if not game_math_stats.get(user_id, {}).get('is_active', True) and \
                game_math_stats.get(user_id, {}).get('lives', 0) > 0:
            game_math_stats[user_id]['is_active'] = True
            game_math_stats[user_id]['lives'] -= 1
            self.game(user_id, None)

    def get_top(self, user_id):
        """ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä—ã "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞".

        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–∑–≤–∞–≤—à–µ–≥–æ –∫–æ–º–∞–Ω–¥—É.
        :type user_id: int –∏–ª–∏ str.
        """
        top_sort = []
        for gamer in game_math_top.values():
            top_sort.append([gamer.get('name'), gamer.get('record')])
        top_sort.sort(key=get_points, reverse=True)

        string_top = str()
        num = 0
        for gamer in top_sort:
            num += 1
            string_top += "{}. {}:\n –í–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {}\n\n".format(num, gamer[0], gamer[1])

        # –ú–∏–Ω—É—Ç–∫–∞ —Ö–≤–∞—Å—Ç–æ–≤—Å—Ç–≤–∞
        if top_sort[0][0] == "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–µ—Ä–µ–∑–∏–Ω":
            string_top += "–û, –º–æ–π —Ö–æ–∑—è–∏–Ω –Ω–∞ –ø–µ—Ä–≤–æ–º –º–µ—Å—Ç–µ!&#128526;"

        if game_math_stats[str(user_id)]['is_active']:
            vk_session.method('messages.send',
                              {'user_id': int(user_id), 'message': string_top, 'random_id': 0,
                               'keyboard': self.start_keyboard})
        else:
            vk_session.method('messages.send',
                              {'user_id': int(user_id), 'message': string_top, 'random_id': 0})

    def exchange_lives_for_balance(self, user_id):
        user_id = str(user_id)

        if game_math_stats.get(user_id, {}).get('lives', 0) >= 5:
            users_info[user_id]['balance'] += 1
            game_math_stats[user_id]['lives'] -= 5

            message = f'–í—ã –æ–±–º–µ–Ω—è–ª–∏ 5‚ù§ –Ω–∞ 1üí∞\n'\
                      f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§\n'\
                      f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info[user_id]["balance"]}üí∞'

        else:
            message = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚ù§ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–±–º–µ–Ω–∞\n' \
                      f'–ù–∞ —Å—á–µ—Ç—É {game_math_stats.get(user_id).get("lives")}‚ù§\n'

        keyboard = None
        if game_math_stats[user_id]['is_active']:
            keyboard = self.start_keyboard

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': message, 'random_id': 0,
                           'keyboard': keyboard})
