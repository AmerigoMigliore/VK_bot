import json
import random
import threading
from data import change_users_info, main_keyboard, users_info, tz
from datetime import datetime, timedelta, time as datetime_time
from keyboard import get_callback_button
from math import floor
from vk_auth import vk_session, VkBotEventType


class GamePets:
    all_pets = {}
    all_foods = {}
    all_pills = {}
    max_pets = 5

    def save_me(self):
        for pets in self.all_pets.values():
            for pet in pets:
                if pet.timer_age is not None:
                    pet.timer_age.cancel()
                    pet.timer_age = None

                if pet.timer_action is not None:
                    if pet.action is not None:
                        answer = f'{pet.name} –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—á–∞—Ç–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –≤–µ—Ä–Ω—É–ª—Å—è –¥–æ–º–æ–π'
                        if users_info.get(pet.owner_id, {}).get('args', {}) is not None and \
                                users_info.get(pet.owner_id, {}).get('args', {}).get('name', '') == pet.name:
                            vk_session.method('messages.send',
                                              {'user_id': int(pet.owner_id),
                                               'message': answer,
                                               'random_id': 0})
                        else:
                            pet.all_messages += [(datetime.now(tz=tz).strftime('%d.%m.%Y %H:%M:%S'), answer)]

                    pet.action = None
                    pet.timer_action.cancel()
                    pet.timer_action = None

                if pet.timer_satiety is not None:
                    pet.timer_satiety.cancel()
                    pet.timer_satiety = None
        return self.all_pets, self.all_foods, self.all_pills

    def load_me(self, data):
        self.all_pets = data[0]
        self.all_foods = data[1]
        self.all_pills = data[2]

        for pets in self.all_pets.values():
            for pet in pets:
                pet.game_pets = self
                if datetime.utcfromtimestamp(pet.time_finish_age.timestamp()) > datetime.utcfromtimestamp(
                        datetime.now(tz=tz).timestamp()):
                    pet.timer_age = threading.Timer((datetime.utcfromtimestamp(
                        pet.time_finish_age.timestamp()) - datetime.utcfromtimestamp(
                        datetime.now(tz=tz).timestamp())).seconds, pet.next_age)
                    pet.timer_age.start()
                else:
                    pet.next_age()

                pet.timer_satiety = threading.Timer(pet.time_between_satiety, pet.update_satiety)
                pet.timer_satiety.start()

    def add_pet(self, owner_id: str):
        self.all_pets[owner_id] += [Pet(self, owner_id)]

    def delete_pet(self, owner_id: str, pet):
        self.all_pets[owner_id].remove(pet)

    def process_event(self, event):
        if event is None:
            return

        if event.type == VkBotEventType.MESSAGE_EVENT:
            user_id = str(event.obj.user_id)

            method = users_info.get(user_id, {}).get('method')
            args = event.obj.payload.get('args')

            if method == 'start':
                if args == 'Pet':
                    change_users_info(user_id, new_method='Pet.process_event',
                                      new_args={'name': str(event.obj.payload.get('name'))})
                    for x in self.all_pets[user_id]:
                        if x.name == event.obj.payload.get('name'):
                            x.process_event(event)
                elif args == 'storage':
                    self.get_storage(user_id)
                elif args == 'store':
                    change_users_info(user_id, new_method='store')
                    self.store(user_id)
                elif args == 'back':
                    vk_session.method('messages.send',
                                      {'user_id': int(user_id),
                                       'message': '–¢–≤–æ–∏ –ø–∏—Ç–æ–º—Ü—ã –±—É–¥—É—Ç –∂–¥–∞—Ç—å —Ç–µ–±—è, —Ö–æ–∑—è–∏–Ω!',
                                       'random_id': 0, 'keyboard': main_keyboard})
                    change_users_info(user_id, 'autoresponder')

                    # –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏, –≤—ã–∑–≤–∞–≤—à–µ–π —Å–æ–±—ã—Ç–∏–µ
                    vk_session.method('messages.sendMessageEventAnswer',
                                      {'event_id': event.obj.event_id,
                                       'user_id': int(user_id),
                                       'peer_id': event.obj.peer_id})
                    return
            elif method == 'store':
                self.store(user_id, event)
            elif method.startswith('Pet.process_event'):
                for x in self.all_pets.get(user_id, []):
                    if x.name == users_info[user_id]['args'].get('name'):
                        x.process_event(event)
                        break
                else:
                    self.start(user_id)

            # –°–±—Ä–æ—Å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–∏, –≤—ã–∑–≤–∞–≤—à–µ–π —Å–æ–±—ã—Ç–∏–µ
            vk_session.method('messages.sendMessageEventAnswer',
                              {'event_id': event.obj.event_id,
                               'user_id': int(user_id),
                               'peer_id': event.obj.peer_id})

        elif event.type == VkBotEventType.MESSAGE_NEW:
            user_id = str(event.obj.from_id)
            method = users_info.get(user_id, {}).get('method')

            if method.startswith('Pet.process_event'):
                for x in self.all_pets.get(user_id, []):
                    if x.name == users_info[user_id]['args'].get('name'):
                        x.process_event(event)
                        break
                else:
                    self.start(user_id)

    def start(self, user_id: str):
        if self.all_pets.get(user_id) is None:
            self.all_pets[user_id] = []
        if self.all_foods.get(user_id) is None:
            self.all_foods[user_id] = 0
        if self.all_pills.get(user_id) is None:
            self.all_pills[user_id] = 0
        count_pets = len(self.all_pets.get(user_id))
        if count_pets == 0:
            pets_str = '–ø–∏—Ç–æ–º—Ü–µ–≤'
        elif count_pets == 1:
            pets_str = '–ø–∏—Ç–æ–º–µ—Ü'
        elif 2 <= count_pets <= 4:
            pets_str = '–ø–∏—Ç–æ–º—Ü–∞'
        else:
            pets_str = '–ø–∏—Ç–æ–º—Ü–µ–≤'

        buttons = []
        if len(self.all_pets[user_id]) > 0:
            pets_str += ':\n'
        for x in self.all_pets[user_id]:
            pets_str += f'\n{x.get_status()}\n'
            buttons += [[get_callback_button(f'{x.name}', 'primary', {'args': 'Pet', 'name': x.name})]]

        buttons += [[get_callback_button('–°–∫–ª–∞–¥', 'secondary', {'args': 'storage'}),
                     get_callback_button('–ú–∞–≥–∞–∑–∏–Ω', 'secondary', {'args': 'store'})]]
        buttons += [[get_callback_button('–í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã', 'negative', {'args': 'back'})]]
        keyboard = str(json.dumps({
            "one_time": False,
            "buttons": buttons
        }, ensure_ascii=False))

        vk_session.method('messages.send',
                          {'user_id': int(user_id),
                           'message': f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –í–∞—Å –≤ –¥–æ–º–∏–∫–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤!\n'
                                      f'–£ –í–∞—Å {count_pets} {pets_str}\n'
                                      f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n',
                           'random_id': 0, 'keyboard': keyboard})

        change_users_info(user_id, new_method='start')

    def get_storage(self, user_id: str):
        vk_session.method('messages.send',
                          {'user_id': int(user_id),
                           'message': f'–í–∞—à —Å–∫–ª–∞–¥:\n'
                                      f'{self.all_foods.get(user_id, 0)}üçé\n'
                                      f'{self.all_pills.get(user_id, 0)}üíä',
                           'random_id': 0})

    def store(self, user_id: str, event=None):
        keyboard = str(json.dumps({
            "one_time": False,
            "buttons": [
                [get_callback_button('1üê£', 'positive', {'args': 'pet'})],

                [get_callback_button('1üçé', 'positive', {'args': 'food_1'}),
                 get_callback_button('10üçé', 'positive', {'args': 'food_10'}),
                 get_callback_button('100üçé', 'positive', {'args': 'food_100'})],

                [get_callback_button('1üíä', 'positive', {'args': 'pill_1'}),
                 get_callback_button('5üíä', 'positive', {'args': 'pill_5'}),
                 get_callback_button('10üíä', 'positive', {'args': 'pill_10'})],

                [get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]
            ]
        }, ensure_ascii=False))
        if event is None:
            answer = f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω "–í—Å–µ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤"!\n–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä:\n\n' \
                     f'–Ø–π—Ü–æ —Å –ø–∏—Ç–æ–º—Ü–µ–º:\n' \
                     f'1üê£ - 10üí∞\n\n' \
                     f'–ï–¥–∞ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:\n' \
                     f'1üçé - 0.2üí∞\n' \
                     f'10üçé - 1.5üí∞\n' \
                     f'100üçé - 10üí∞\n\n' \
                     f'–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞:\n' \
                     f'1üíä - 5üí∞\n' \
                     f'5üíä - 20üí∞\n' \
                     f'10üíä - 30üí∞\n\n' \
                     f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞'
        else:
            args = event.obj.payload.get('args')
            if args == 'pet':
                if len(self.all_pets.get(user_id)) < self.max_pets:
                    if users_info.get(user_id, {}).get("balance", 0) >= 10:
                        users_info[user_id]["balance"] -= 10
                        self.add_pet(user_id)
                        answer = '–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞. –û–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é'
                    else:
                        answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                                 f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                                 f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 10üí∞'
                else:
                    answer = '–£ –í–∞—Å –∏–º–µ–µ—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—Ç–æ–º—Ü–µ–≤'

            elif args == 'food_1':
                if users_info.get(user_id, {}).get("balance", 0) >= 0.2:
                    users_info[user_id]["balance"] -= 0.2
                    self.all_foods[user_id] += 1
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 1üçé.\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.all_foods[user_id]}üçé'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 0.2üí∞'
            elif args == 'food_10':
                if users_info.get(user_id, {}).get("balance", 0) >= 1.5:
                    users_info[user_id]["balance"] -= 1.5
                    self.all_foods[user_id] += 10
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 10üçé.\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.all_foods[user_id]}üçé'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 1.5üí∞'
            elif args == 'food_100':
                if users_info.get(user_id, {}).get("balance", 0) >= 10:
                    users_info[user_id]["balance"] -= 10
                    self.all_foods[user_id] += 100
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 100üçé.\n–í —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.all_foods[user_id]}üçé'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 10üí∞'

            elif args == 'pill_1':
                if users_info.get(user_id, {}).get("balance", 0) >= 5:
                    users_info[user_id]["balance"] -= 5
                    self.all_pills[user_id] += 1
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 1üíä.\n–í –∞–ø—Ç–µ—á–∫–µ: {self.all_pills[user_id]}üíä'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 5üí∞'
            elif args == 'pill_5':
                if users_info.get(user_id, {}).get("balance", 0) >= 20:
                    users_info[user_id]["balance"] -= 20
                    self.all_pills[user_id] += 5
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 5üíä.\n–í –∞–ø—Ç–µ—á–∫–µ: {self.all_pills[user_id]}üíä'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 20üí∞'
            elif args == 'pill_10':
                if users_info.get(user_id, {}).get("balance", 0) >= 30:
                    users_info[user_id]["balance"] -= 30
                    self.all_pills[user_id] += 10
                    answer = f'–í—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ 10üíä.\n–í –∞–ø—Ç–µ—á–∫–µ: {self.all_pills[user_id]}üíä'
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n' \
                             f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(user_id, {}).get("balance", 0), 1)}üí∞\n' \
                             f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 30üí∞'

            elif args == 'back':
                self.start(user_id)
                return
            else:
                answer = '–í –º–∞–≥–∞–∑–∏–Ω–µ –Ω–µ—Ç –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞'

        vk_session.method('messages.send',
                          {'user_id': int(user_id),
                           'message': answer,
                           'random_id': 0, 'keyboard': keyboard})


class TemplatePet:
    ages: dict
    sexes: list
    level_0: dict
    level_1: dict
    level_2: dict
    level_3: dict
    legendary: dict

    diseases: dict
    works: dict

    # in seconds
    time_between_satiety = 60 * 30

    def __init__(self):
        self.ages = {'–Ø–π—Ü–æ': 5, '–ú–ª–∞–¥–µ–Ω—á–µ—Å—Ç–≤–æ': 5, '–î–µ—Ç—Å—Ç–≤–æ': 5, '–Æ–Ω–æ—Å—Ç—å': 5,
                     '–ú–æ–ª–æ–¥–æ—Å—Ç—å': 60 * 60 * 24 * 7, '–ó—Ä–µ–ª–æ—Å—Ç—å': 60 * 60 * 24 * 21, '–°—Ç–∞—Ä–æ—Å—Ç—å': 0}
        self.sexes = ['–ñ–µ–Ω—â–∏–Ω–∞', '–ú—É–∂—á–∏–Ω–∞']

        # health=0, intellect=0, power=0, speed=0, industriousness=0, neatness=0, luck=0, work_time_night=False
        self.level_0 = {'–ú–∏–Ω—å–æ–Ω': [Minion, (30, 10, 30, 40, 80, 20, 0, False)],
                        '–§–ª–æ—Ä–∞ –∫–æ–ª–æ—Å—Å': [FloraColossus, (30, 80, 30, 80, 30, 30, 0, False)]
                        # '–ì—É–Ω–≥–∞–Ω': self.get_features(30, 5, 15, 40, 40, 30, 0, False),
                        }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!
        self.level_1 = {'–°–º—É—Ä—Ñ': (40, 0, 0, 0, 0, 0, 0, False),
                        }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!
        self.level_2 = {'–ù–∞\'–í–∏': (50, 0, 0, 0, 0, 0, 0, False),
                        }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!
        self.level_3 = {'–ê–≤—Ç–æ–±–æ—Ç': (70, 0, 0, 0, 0, 0, 0, False)
                        }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!
        self.legendary = {'–î–∂–∞-–î–∂–∞ –ë–∏–Ω–∫—Å': (80, 0, 0, 0, 0, 0, 0, False),
                          '–ë–∞–º–±–ª–±–∏': (100, 0, 0, 0, 0, 0, 0, False),
                          '–û–ø—Ç–∏–º—É—Å –ü—Ä–∞–π–º': (100, 0, 0, 0, 0, 0, 0, False),
                          }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!

        # –ó–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤–ª–∏—è—é—Ç –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö -(0 - 100), –Ω–æ –Ω–µ –±–æ–ª–µ–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö
        self.diseases = {
            '–ü—Ä–æ—Å—Ç—É–¥–∞': {'treatment': 1, 'effects': self.get_features(health=5, speed=5, industriousness=5)}
        }  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!
        self.works = {'–ù–∞–ª–∞–¥—á–∏–∫ –±–æ—Ç–∞': {'skills': {'intellect': 60, 'industriousness': 30, 'neatness': 30},
                                        'salary_per_min': 0.2, 'salary_in': 'money'},
                      '–ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç–µ–ª—å –ø–∏–Ω–≥–≤–∏–Ω–æ–≤': {'skills': {'power': 30, 'industriousness': 50},
                                                     'salary_per_min': 0.1, 'salary_in': 'money'}}  # TODO: –ó–∞–ø–æ–ª–Ω–∏—Ç—å!

    @staticmethod
    def get_features(health=0, intellect=0, power=0, speed=0, industriousness=0, neatness=0,
                     luck=0, work_time_night=False):
        return {'health': health,  # –ó–¥–æ—Ä–æ–≤—å–µ
                'intellect': intellect,  # –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç
                'power': power,  # –°–∏–ª–∞
                'speed': speed,  # –°–∫–æ—Ä–æ—Å—Ç—å
                'industriousness': industriousness,  # –¢—Ä—É–¥–æ–ª—é–±–∏–µ
                'neatness': neatness,  # –ê–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å
                'luck': luck,  # –®–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω–∏—è –≤—ã–≥–æ–¥—ã –ø—Ä–∏ –ß–ü
                'work_time_night': work_time_night  # False = –î–µ–Ω—å, True = –ù–æ—á—å
                }

    @staticmethod
    def translate(item):
        translate = {'health': '–ó–¥–æ—Ä–æ–≤—å–µ',
                     'intellect': '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç',
                     'power': '–°–∏–ª–∞',
                     'speed': '–°–∫–æ—Ä–æ—Å—Ç—å',
                     'industriousness': '–¢—Ä—É–¥–æ–ª—é–±–∏–µ',
                     'neatness': '–ê–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å',
                     'luck': '–£–¥–∞—á–∞',
                     'work_time_night': '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã'}
        return translate.get(item, None)

    def get_string_features(self, features):

        answer = str()
        for x in features.items():
            if x[0] == 'work_time_night':
                answer += f'{self.translate(x[0])}: {"–ù–æ—á—å" if x[1] else "–î–µ–Ω—å"}\n'
            else:
                answer += f'{self.translate(x[0])}: {x[1]}/100\n'
        return answer


class Pet(TemplatePet):
    game_pets: GamePets
    all_messages: list

    owner_id: str
    name: str
    age: int
    sex: str
    type: str
    level: dict

    status: str

    lives: int
    disease = None

    satiety: int
    food: int

    identified_pet = None
    features: dict

    timer_age = None
    time_finish_age: datetime

    timer_satiety = None

    action = None
    work_name: str
    timer_action = None
    time_start_action: datetime
    time_finish_action: datetime

    bones = 0
    max_bones = 5
    food_from_bone = 1 / 5

    is_body_studied = False

    def __init__(self, all_pets: GamePets, owner_id: str):
        super().__init__()
        self.game_pets = all_pets
        self.all_messages = list()
        self.owner_id = owner_id

        name = '–ü–∏—Ç–æ–º–µ—Ü 1'
        n = 2
        while True:
            for x in self.game_pets.all_pets.get(owner_id, []):
                if name == x.name:
                    name = f'–ü–∏—Ç–æ–º–µ—Ü {n}'
                    n += 1
                    break
            else:
                break

        self.name = name

        # r = random.randint(0, 1000)
        r = 1000
        if r == 0:
            self.level = self.legendary
        elif 0 < r <= 5:
            self.level = self.level_3
        elif 5 < r <= 20:
            self.level = self.level_2
        elif 20 < r <= 70:
            self.level = self.level_1
        else:
            self.level = self.level_0.copy()
        self.type = random.choice(list(self.level))
        self.identified_pet = self.level.get(self.type)[0](self)
        self.features = self.get_features(*self.level.get(self.type)[1])

        self.sex = random.choice(self.sexes)
        self.status = '–ø–æ–∫–∞ –µ—â–µ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ —è–π—Ü–æ'

        self.age = 0
        self.timer_age = threading.Timer(self.ages[list(self.ages.keys())[self.age]], self.next_age)
        self.timer_age.start()
        self.time_finish_age = datetime.now(tz=tz) + timedelta(seconds=self.ages[list(self.ages.keys())[self.age]])

        self.lives = 100
        self.disease = None

        self.satiety = 100
        self.food = 0

    def is_male(self):
        return True if self.sex == '–ú—É–∂—á–∏–Ω–∞' else False

    def get_main_keyboard(self):
        buttons = []
        buttons += [[get_callback_button(f'{self.name}', 'secondary', {'args': 'get_status'})]]
        if self.disease is not None:
            buttons += [[get_callback_button(f'–í—ã–ª–µ—á–∏—Ç—å ({self.diseases[self.disease]["treatment"]}üíä)', 'negative',
                                             {'args': 'heal'}),
                         get_callback_button('–ü–æ–∫–æ—Ä–º–∏—Ç—å', 'positive', {'args': 'give_food'})]]
        else:
            buttons += [[get_callback_button('–ü–æ–∫–æ—Ä–º–∏—Ç—å', 'positive', {'args': 'give_food'})]]
        buttons += [
            [get_callback_button('–î–µ–π—Å—Ç–≤–∏—è', 'primary', {'args': 'actions'})],

            [get_callback_button('–í—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏', 'primary', {'args': 'get_time_to_next_age'})],

            [get_callback_button('–°–ø—Ä–∞–≤–∫–∞', 'primary', {'args': 'get_info_main'}),
             get_callback_button('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'primary', {'args': 'get_info_all'})],

            [get_callback_button('–°–º–µ–Ω–∏—Ç—å –∏–º—è', 'negative', {'args': 'set_name'}),
             get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]
        ]
        return str(json.dumps({"one_time": False, "buttons": buttons}, ensure_ascii=False))

    def process_event(self, event=None, message=None):
        if event is None:
            if message is None:
                message = f'~{self.name}~'
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': message,
                               'random_id': 0, 'keyboard': self.get_main_keyboard()})
            return

        if event.type == VkBotEventType.MESSAGE_EVENT:
            method = users_info.get(self.owner_id, {}).get('method')
            args = event.obj.payload.get('args')

            if method == 'Pet.process_event':
                keyboard = self.get_main_keyboard()
                if args == 'get_status':
                    answer = self.get_status()
                elif args == 'heal':
                    answer = self.heal()
                    keyboard = self.get_main_keyboard()
                elif args == 'give_food':
                    change_users_info(self.owner_id, new_method='Pet.process_event.give_food',
                                      new_args=users_info.get(self.owner_id, {}).get('args'))
                    self.give_food()
                    return
                elif args == 'actions':
                    change_users_info(self.owner_id, new_method='Pet.process_event.actions',
                                      new_args=users_info.get(self.owner_id, {}).get('args'))
                    self.actions()
                    return
                elif args == 'get_time_to_next_age':
                    answer = self.get_time_to_next_age()
                elif args == 'get_info_main':
                    answer = self.get_info(False)
                elif args == 'get_info_all':
                    answer = self.get_info(True)
                elif args == 'set_name':
                    answer = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞ (–¥–ª–∏–Ω–æ–π –æ—Ç 1 –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)'
                    change_users_info(self.owner_id, new_method='Pet.process_event.set_name',
                                      new_args=users_info.get(self.owner_id, {}).get('args'))
                elif args == 'back':
                    self.game_pets.start(self.owner_id)
                    return
                else:
                    keyboard = self.get_main_keyboard()
                    answer = f'~{self.name}~'
                    for m in self.all_messages:
                        answer += f'\n{m[0]}: {m[1]}'
                    self.all_messages.clear()

                vk_session.method('messages.send',
                                  {'user_id': int(self.owner_id),
                                   'message': answer,
                                   'random_id': 0, 'keyboard': keyboard})
            elif method == 'Pet.process_event.give_food':
                self.give_food(event)
            elif method == 'Pet.process_event.actions':
                self.actions(event)

        elif event.type == VkBotEventType.MESSAGE_NEW:
            user_id = str(event.obj.from_id)
            method = users_info.get(user_id, {}).get('method')
            message = event.obj.text

            if method == 'Pet.process_event.set_name':
                self.set_name(message)

    def set_name(self, name):
        name = name.strip()
        if name is not None and 30 >= len(name) > 0:
            if name not in [x.name for x in self.game_pets.all_pets[self.owner_id]]:
                self.name = name
                answer = f'–ò–º—è –ø–∏—Ç–æ–º—Ü–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {name}'
            else:
                answer = '–ü–∏—Ç–æ–º–µ—Ü —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
        else:
            answer = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è –ø–∏—Ç–æ–º—Ü–∞'

        vk_session.method('messages.send',
                          {'user_id': int(self.owner_id),
                           'message': answer,
                           'random_id': 0, 'keyboard': self.get_main_keyboard()})
        change_users_info(self.owner_id, new_method='Pet.process_event',
                          new_args={'name': self.name})

    def next_age(self):
        self.age += 1
        if list(self.ages.keys())[self.age] == '–ú–ª–∞–¥–µ–Ω—á–µ—Å—Ç–≤–æ':
            self.timer_satiety = threading.Timer(self.time_between_satiety, self.update_satiety)
            self.timer_satiety.start()
        elif list(self.ages.keys())[self.age] == '–°—Ç–∞—Ä–æ—Å—Ç—å':
            self.leave(True)
            return
        self.status = f'–≤—ã—Ä–æ—Å –¥–æ —Å—Ç–∞–¥–∏–∏ "{list(self.ages.keys())[self.age]}"'
        self.timer_age = threading.Timer(self.ages[list(self.ages.keys())[self.age]], self.next_age)
        self.timer_age.start()
        self.time_finish_age = datetime.now(tz=tz) + timedelta(seconds=self.ages[list(self.ages.keys())[self.age]])

        answer = f'–£—Ä–∞! {self.name} {self.status}'
        if users_info.get(self.owner_id, {}).get('args', {}) is not None and \
                users_info.get(self.owner_id, {}).get('args', {}).get('name', '') == self.name:
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': answer,
                               'random_id': 0})
            self.update_actions_to_new_age()
        else:
            self.all_messages += [(datetime.now(tz=tz).strftime('%d.%m.%Y %H:%M:%S'), answer)]

    def update_actions_to_new_age(self):
        if users_info.get(self.owner_id, {}).get('method') == 'Pet.process_event.actions':
            self.actions()

    def get_time_to_next_age(self):
        time = self.time_finish_age - datetime.now(tz=tz)
        if time.days == 1:
            days = '–¥–µ–Ω—å'
        elif 2 <= time.days <= 4:
            days = '–¥–Ω—è'
        else:
            days = '–¥–Ω–µ–π'
        return f'–î–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç–∞–¥–∏–∏ "{list(self.ages.keys())[self.age + 1]}" –µ—â–µ {time.days} {days}, {timedelta(seconds=time.seconds)}'

    def get_food_keyboard(self):
        buttons = [[get_callback_button('1üçé', 'positive', {'args': 'give_food_1'}),
                    get_callback_button('10üçé', 'positive', {'args': 'give_food_10'}),
                    get_callback_button('100üçé', 'positive', {'args': 'give_food_100'})]]
        if self.game_pets.all_foods.get(self.owner_id, 0) > 0:
            buttons += [[get_callback_button(
                f'{self.game_pets.all_foods.get(self.owner_id)}üçé',
                'positive', {'args': 'give_food_all'}
            )]]
        buttons += [[get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]]
        return str(json.dumps({"one_time": False, "buttons": buttons}, ensure_ascii=False))

    def give_food(self, event=None):
        keyboard = None
        if event is None:
            keyboard = self.get_food_keyboard()
            answer = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞'
        else:
            args = event.obj.payload.get('args')
            if args == 'give_food_1':
                if self.game_pets.all_foods[self.owner_id] >= 1:
                    self.game_pets.all_foods[self.owner_id] -= 1
                    self.food += 1
                    answer = f'–í—ã –¥–∞–ª–∏ –ø–∏—Ç–æ–º—Ü—É 1üçé.\n' \
                             f'–£ –Ω–µ–≥–æ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}üçé\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
                    keyboard = self.get_food_keyboard()
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üçé.\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
            elif args == 'give_food_10':
                if self.game_pets.all_foods[self.owner_id] >= 10:
                    self.game_pets.all_foods[self.owner_id] -= 10
                    self.food += 10
                    answer = f'–í—ã –¥–∞–ª–∏ –ø–∏—Ç–æ–º—Ü—É 10üçé.\n' \
                             f'–£ –Ω–µ–≥–æ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}üçé\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
                    keyboard = self.get_food_keyboard()
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üçé.\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
            elif args == 'give_food_100':
                if self.game_pets.all_foods[self.owner_id] >= 100:
                    self.game_pets.all_foods[self.owner_id] -= 100
                    self.food += 100
                    answer = f'–í—ã –¥–∞–ª–∏ –ø–∏—Ç–æ–º—Ü—É 100üçé.\n' \
                             f'–£ –Ω–µ–≥–æ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}üçé\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
                    keyboard = self.get_food_keyboard()
                else:
                    answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üçé.\n' \
                             f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'
            elif args == 'give_food_all':
                self.food += self.game_pets.all_foods.get(self.owner_id)
                answer = f'–í—ã –¥–∞–ª–∏ –ø–∏—Ç–æ–º—Ü—É {self.game_pets.all_foods.get(self.owner_id)}üçé.\n' \
                         f'–£ –Ω–µ–≥–æ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}üçé\n' \
                         f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: 0üçé'
                self.game_pets.all_foods[self.owner_id] = 0
                keyboard = self.get_food_keyboard()
            elif args == 'back':
                change_users_info(self.owner_id, new_method='Pet.process_event',
                                  new_args=users_info.get(self.owner_id, {}).get('args'))
                answer = '–í—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –∫–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞'
                keyboard = self.get_main_keyboard()
            else:
                answer = f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥—ã –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞\n' \
                         f'–£ –Ω–µ–≥–æ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}üçé\n' \
                         f'–£ –í–∞—Å –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {self.game_pets.all_foods[self.owner_id]}üçé'

        vk_session.method('messages.send',
                          {'user_id': int(self.owner_id),
                           'message': answer,
                           'random_id': 0, 'keyboard': keyboard})

    def update_satiety(self):
        if self.bones > 0:
            self.food += self.food_from_bone * self.bones

        if self.satiety >= 5:
            self.satiety -= 5
        else:
            self.satiety = 0

        while self.food > 0:
            if self.satiety < 100:
                self.food -= 1
                if self.satiety <= 95:
                    self.satiety += 5
                else:
                    self.satiety = 100
                self.status = f'–ø–æ–∫—É—à–∞–ª{"" if self.is_male() else "a"}'
            else:
                break
        else:
            self.status = '–≥–æ–ª–æ–¥–∞–µ—Ç'

        if self.satiety == 0:
            if self.disease is None:
                self.disease = random.choice(list(self.diseases))
                self.status = f'–∑–∞–±–æ–ª–µ–ª{"" if self.is_male() else "a"} ({self.disease})'
                for x in self.diseases.get(self.disease).get('effects').items():
                    self.features[x[0]] -= x[1] if self.features[x[0]] > x[1] else self.features[x[0]]
            else:
                self.lives -= (100 - self.features.get('health', 0)) / 10

            if self.lives <= 0:
                self.leave(False)
                return

        elif self.satiety == 100 and self.lives < 100:
            self.lives += self.features.get('health', 0) / 10
            if self.lives > 100:
                self.lives = int(100)

        self.timer_satiety = threading.Timer(self.time_between_satiety, self.update_satiety)
        self.timer_satiety.start()

    def leave(self, is_elderly):
        self.game_pets.delete_pet(self.owner_id, self)
        if is_elderly:
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': f'–ü–∏—Ç–æ–º–µ—Ü {self.name} –≤—ã—Ä–æ—Å —Å–æ–≤—Å–µ–º –±–æ–ª—å—à–∏–º –∏ –±—ã–ª –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –¥—Ä—É–≥–æ–π –¥–æ–º–∏–∫',
                               'random_id': 0})
        else:
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': f'–ü–∏—Ç–æ–º–µ—Ü {self.name} —Å—Ç–∞–ª —Å–æ–≤—Å–µ–º —Å–ª–∞–±, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –∑–∞–±—Ä–∞–ª–∏ –≤ –¥—Ä—É–≥–æ–π –¥–æ–º–∏–∫',
                               'random_id': 0})
        if users_info.get(self.owner_id, {}).get('args', {}) is not None and \
                users_info.get(self.owner_id, {}).get('args', {}).get('name', '') == self.name:
            self.game_pets.start(self.owner_id)
        del self

    def heal(self):
        if self.game_pets.all_pills.get(self.owner_id, 0) >= self.diseases.get(self.disease).get('treatment'):
            self.game_pets.all_pills[self.owner_id] -= self.diseases.get(self.disease).get('treatment')
            self.disease = None
            self.features = self.get_features(*self.level.get(self.type)[1])
            self.lives = 100
            self.status = f'–Ω–µ–¥–∞–≤–Ω–æ –≤—ã–ª–µ—á–∏–ª{"—Å—è" if self.is_male() else "a—Å—å"}'
            answer = '–í—ã –≤—ã–ª–µ—á–∏–ª–∏ –ø–∏—Ç–æ–º—Ü–∞!'
        else:
            answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üíä –¥–ª—è –ª–µ—á–µ–Ω–∏—è.\n' \
                     f'–£ –í–∞—Å –≤ –∞–ø—Ç–µ—á–∫–µ: {self.game_pets.all_pills.get(self.owner_id)}üíä\n' \
                     f'–¢—Ä–µ–±—É–µ—Ç—Å—è: {self.diseases.get(self.disease).get("treatment")}üíä'
        return answer

    def get_status(self):
        return f'{self.name} {self.status}\n–î–µ–π—Å—Ç–≤–∏–µ: ' \
               f'{self.action if self.action is not None else "–°–≤–æ–±–æ–¥–µ–Ω" if self.is_male() else "–°–≤–æ–±–æ–¥–Ω–∞"}'

    def get_info(self, is_all):
        if self.age == 0:
            return (f'\n'
                    f'~–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ~\n'
                    f'–ò–º—è: {self.name}\n'
                    f'–í–æ–∑—Ä–∞—Å—Ç: {list(self.ages.keys())[self.age]}\n'
                    f'–°—Ç–∞—Ç—É—Å: {self.status}\n'
                    f'–ï–¥–∞ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}\n\n')
        elif not is_all:
            return (f'\n'
                    f'~–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ~\n'
                    f'–ò–º—è: {self.name}\n'
                    f'–í–æ–∑—Ä–∞—Å—Ç: {list(self.ages.keys())[self.age]}\n'
                    f'–°—Ç–∞—Ç—É—Å: {self.status}\n'
                    f'–ñ–∏–∑–Ω–∏: {round(self.lives, 1)}/100\n'
                    f'–ë–æ–ª–µ–∑–Ω—å: {"–ù–µ—Ç" if self.disease is None else self.disease}\n'
                    f'–°—ã—Ç–æ—Å—Ç—å: {self.satiety}/100\n'
                    f'–ï–¥–∞ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}\n\n')
        else:
            return (f'\n'
                    f'~–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ~\n'
                    f'–ò–º—è: {self.name}\n'
                    f'–í–æ–∑—Ä–∞—Å—Ç: {list(self.ages.keys())[self.age]}\n'
                    f'–ü–æ–ª: {self.sex}\n'
                    f'–¢–∏–ø: {self.type}\n'
                    f'–°—Ç–∞—Ç—É—Å: {self.status}\n'
                    f'–ñ–∏–∑–Ω–∏: {round(self.lives, 1)}/100\n'
                    f'–ë–æ–ª–µ–∑–Ω—å: {"–ù–µ—Ç" if self.disease is None else self.disease}\n'
                    f'–°—ã—Ç–æ—Å—Ç—å: {self.satiety}/100\n'
                    f'–ï–¥–∞ –≤ –∫–æ—Ä–º—É—à–∫–µ: {round(self.food, 1)}\n\n'

                    f'–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n'
                    f'{self.get_string_features(self.features)}')

    def get_time_to_finish_action(self):
        if self.action is None:
            return f'–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å 0 —Å–µ–∫—É–Ω–¥'
        else:
            if self.action.startswith('—Ä–∞–±–æ—Ç–∞–µ—Ç'):
                time = datetime.now(tz=tz) - self.time_start_action
                text = '–° –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—à–ª–æ'
            else:
                time = self.time_finish_action - datetime.now(tz=tz)
                text = '–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å'
            if time.days == 1:
                days = '–¥–µ–Ω—å'
            elif 2 <= time.days <= 4:
                days = '–¥–Ω—è'
            else:
                days = '–¥–Ω–µ–π'
            return f'{text} {time.days} {days}, {timedelta(seconds=time.seconds)}'

    def get_actions_keyboard(self):
        buttons = []

        if self.age >= list(self.ages.keys()).index('–î–µ—Ç—Å—Ç–≤–æ'):
            buttons += [[get_callback_button('–ü–æ—Å–∞–¥–∏—Ç—å –∫–æ—Å—Ç–æ—á–∫—É, -1üçé, 1–º–∏–Ω', 'secondary', {'args': 'plant_bone'})]]
        if self.age >= list(self.ages.keys()).index('–Æ–Ω–æ—Å—Ç—å'):
            buttons += [[get_callback_button('–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è, -0.5üí∞, 30–º–∏–Ω', 'secondary', {'args': 'competition'})]]
        if self.age >= list(self.ages.keys()).index('–ú–æ–ª–æ–¥–æ—Å—Ç—å'):
            if self.action is not None and self.action.startswith('—Ä–∞–±–æ—Ç–∞–µ—Ç'):
                buttons += [[get_callback_button('–í–µ—Ä–Ω—É—Ç—å—Å—è —Å —Ä–∞–±–æ—Ç—ã', 'negative', {'args': 'work.finish'})]]
            else:
                buttons += [[get_callback_button('–ò–¥—Ç–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É', 'secondary', {'args': 'work'})]]

        buttons += self.identified_pet.get_action_buttons()
        buttons += [[get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]]
        return str(json.dumps({"one_time": False, "buttons": buttons}, ensure_ascii=False))

    def check_action(self, args):
        answer = None
        if args == 'plant_bone':
            answer = self.plant_bone()
        elif args.startswith('competition'):
            answer = self.competition(args)
        elif args.startswith('work'):
            answer = self.work(args)

        return answer

    def actions(self, event=None):
        answer = f'–í–æ—Ç, —á—Ç–æ —É–º–µ–µ—Ç {self.name}'
        keyboard = None

        if self.age == list(self.ages.keys()).index('–Ø–π—Ü–æ'):
            answer = f'–ü–∏—Ç–æ–º–µ—Ü {self.name} –µ—â–µ –º–∞–ª –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π'
            change_users_info(self.owner_id, new_method='Pet.process_event',
                              new_args=users_info.get(self.owner_id, {}).get('args'))
            self.process_event(message=answer)
            return

        if event is None:
            keyboard = self.get_actions_keyboard()

        elif event.type == VkBotEventType.MESSAGE_EVENT:
            args = event.obj.payload.get('args')
            if args == 'back':
                change_users_info(self.owner_id, new_method='Pet.process_event',
                                  new_args=users_info.get(self.owner_id, {}).get('args'))
                self.process_event()
                return
            elif self.action is not None and args != 'work.finish':
                answer = f'{self.name} {self.action} –∏ –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n' \
                         f'{self.get_time_to_finish_action()}'
                keyboard = None
            else:
                answer = self.check_action(args)
                if answer is None:
                    answer = self.identified_pet.check_action(args)
                    if answer is None:
                        answer = f'{self.name} –µ—â–µ –Ω–µ —É–º–µ–µ—Ç —ç—Ç–æ –¥–µ–ª–∞—Ç—å'
                    else:
                        keyboard = self.get_actions_keyboard()
        if answer != -1:
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': answer,
                               'random_id': 0, 'keyboard': keyboard})

    def send_message_action(self, answer):
        if users_info.get(self.owner_id, {}).get('args', {}) is not None and \
                users_info.get(self.owner_id, {}).get('args', {}).get('name', '') == self.name:

            if users_info.get(self.owner_id).get('method') == 'Pet.process_event.actions':
                keyboard = self.get_actions_keyboard()
            else:
                keyboard = None
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id), 'message': answer, 'random_id': 0, 'keyboard': keyboard})
        else:
            self.all_messages += [(datetime.now(tz=tz).strftime('%d.%m.%Y %H:%M:%S'), answer)]

    def plant_bone(self, is_finish=False):
        if is_finish:
            self.action = None
            if bool(random.randint(0, 1)):
                self.bones += 1
                answer = f'{self.name} –ø–æ—Å–∞–¥–∏–ª{"" if self.is_male() else "a"} –∫–æ—Å—Ç–æ—á–∫—É!'
            else:
                answer = f'{self.name} –ø–æ—Å–∞–¥–∏–ª{"" if self.is_male() else "a"} –∫–æ—Å—Ç–æ—á–∫—É, –Ω–æ –æ–Ω–∞ –Ω–µ –ø—Ä–∏–∂–∏–ª–∞—Å—å.'
            answer += f'\n–í—Å–µ–≥–æ –ø–æ—Å–∞–∂–µ–Ω–æ {self.bones}üå≥\n' \
                      f'–û–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç {round(self.bones * self.food_from_bone, 1)}üçé/{int(self.time_between_satiety / 60)}–º–∏–Ω'
            self.action = None
            self.send_message_action(answer)
            return
        elif self.bones >= self.max_bones:
            answer = f'{self.name} –ø–æ—Å–∞–¥–∏–ª{"" if self.is_male() else "a"} –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üå≥.'
        elif self.food >= 1:
            self.food -= 1
            self.action = '—Å–∞–∂–∞–µ—Ç –∫–æ—Å—Ç–æ—á–∫—É'
            self.timer_action = threading.Timer(60, function=self.plant_bone, args=[True])
            self.timer_action.start()
            self.time_finish_action = datetime.now(tz=tz) + timedelta(seconds=60)
            answer = f'{self.name} –Ω–∞—á–∞–ª{"" if self.is_male() else "a"} —Å–∞–∂–∞—Ç—å –∫–æ—Å—Ç–æ—á–∫—É.'
        else:
            answer = f'–£ {self.name} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üçé, —á—Ç–æ–±—ã –ø–æ—Å–∞–¥–∏—Ç—å –∫–æ—Å—Ç–æ—á–∫—É.'
        answer += f'\n–í—Å–µ–≥–æ –ø–æ—Å–∞–∂–µ–Ω–æ {self.bones}üå≥\n' \
                  f'–û–Ω–∏ –ø—Ä–∏–Ω–æ—Å—è—Ç {round(self.bones * self.food_from_bone, 1)}üçé/{int(self.time_between_satiety / 60)}–º–∏–Ω'

        return answer

    def competition(self, args, is_finish=False):
        def go():
            if not is_finish:
                if users_info.get(self.owner_id, {}).get("balance", 0) >= 0.5:
                    users_info[self.owner_id]["balance"] -= 0.5
                    self.action = f'—É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ {text_competition}'
                    self.timer_action = threading.Timer(60 * 30, function=self.competition,
                                                        args=[args, True])
                    self.timer_action.start()
                    self.time_finish_action = datetime.now(tz=tz) + timedelta(seconds=60 * 30)
                    answer_ = f'{self.name} –Ω–∞—á–∞–ª{"" if self.is_male() else "a"} —Å—Ä–∞–∂–∞—Ç—å—Å—è –∑–∞ –ø–µ—Ä–≤–æ–µ –º–µ—Å—Ç–æ ' \
                              f'–≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ {text_competition}'
                else:
                    answer_ = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞.\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(self.owner_id, {}).get("balance", 0), 1)}üí∞\n' \
                              f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 0.5üí∞'
            else:
                if random.randint(1, 110) <= success:
                    users_info[self.owner_id]["balance"] += 5
                    answer_ = f'{self.name} –≤—ã–∏–≥—Ä–∞–ª{"" if self.is_male() else "a"} —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –ø–æ {text_competition} ' \
                              f'–∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª{"" if self.is_male() else "a"} 5üí∞'
                else:
                    if self.features.get('luck', 0) > 0 and random.randint(0, 200) <= self.features.get('luck'):
                        users_info[self.owner_id]["balance"] += 3
                        answer_ = f'{self.name} –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª{"" if self.is_male() else "a"} –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö ' \
                                  f'–ø–æ {text_competition}, –Ω–æ —É–¥–∞—á–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –Ω–∞ {"–µ–≥–æ" if self.is_male() else "–µ–µ"} ' \
                                  f'—Å—Ç–æ—Ä–æ–Ω–µ, –∏ —Å–ø–æ–Ω—Å–æ—Ä—ã –≤—ã–¥–∞–ª–∏ –ø–æ–æ—â—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑ 3üí∞'
                    else:
                        answer_ = f'{self.name} –∑–∞–Ω—è–ª{"" if self.is_male() else "a"} {random.randint(2, 100)} –º–µ—Å—Ç–æ ' \
                                  f'–Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –ø–æ {text_competition} –∏ –Ω–∏—á–µ–≥–æ –Ω–µ ' \
                                  f'–∑–∞—Ä–∞–±–æ—Ç–∞–ª{"" if self.is_male() else "a"}'

            return answer_

        if args == 'competition':
            keyboard = None
            if users_info.get(self.owner_id, {}).get("balance", 0) >= 0.5:
                answer = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è'
                keyboard = str(json.dumps(
                    {"one_time": True,
                     "buttons": [
                         [get_callback_button('–ù–∞—É–∫–∞', 'primary', {'args': 'competition.science'})],
                         [get_callback_button('–ü–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏–µ –∫–∞–Ω–∞—Ç–∞', 'primary', {'args': 'competition.tug_of_war'})],
                         [get_callback_button('–ë–µ–≥', 'primary', {'args': 'competition.running'})],
                         [get_callback_button('–û—Ä–∏–≥–∞–º–∏', 'primary', {'args': 'competition.origami'})],
                         [get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'competition.back'})]
                     ]
                     }, ensure_ascii=False))
            else:
                answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞.\n' \
                         f'–í–∞—à –±–∞–ª–∞–Ω—Å: {round(users_info.get(self.owner_id, {}).get("balance", 0), 1)}üí∞\n' \
                         f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 0.5üí∞'
            vk_session.method('messages.send',
                              {'user_id': int(self.owner_id),
                               'message': answer,
                               'random_id': 0, 'keyboard': keyboard})
            return -1
        elif args == 'competition.back':
            self.actions()
            return -1
        elif args == 'competition.science':
            success = self.features.get('intellect', 0)
            text_competition = '–Ω–∞—É–∫–µ'
        elif args == 'competition.tug_of_war':
            success = self.features.get('intellect', 0) * 0.2 + \
                      self.features.get('power', 0) * 0.8
            text_competition = '–ø–µ—Ä–µ—Ç—è–≥–∏–≤–∞–Ω–∏—é –∫–∞–Ω–∞—Ç–∞'
        elif args == 'competition.running':
            success = self.features.get('speed', 0)
            text_competition = '–±–µ–≥—É'
        elif args == 'competition.origami':
            success = self.features.get('neatness', 0)
            text_competition = '–æ—Ä–∏–≥–∞–º–∏'
        else:
            answer = '–î–∞–Ω–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è'
            return answer

        if is_finish:
            self.action = None
            self.send_message_action(go())
            return -1
        vk_session.method('messages.send',
                          {'user_id': int(self.owner_id),
                           'message': go(),
                           'random_id': 0, 'keyboard': self.get_actions_keyboard()})
        return -1

    def work(self, args):
        if args == 'work.back':
            self.actions()
            return -1

        if (self.features.get('work_time_night') and
                datetime_time(hour=9) <= datetime.now(tz=tz).time() < datetime_time(hour=21)):
            self.action = None
            self.send_message_action(f'{self.name} —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 21:00 –¥–æ 9:00')
            return -1
        elif (not self.features.get('work_time_night') and
              (datetime_time(hour=21) <= datetime.now(tz=tz).time() <= datetime_time(hour=23, minute=59, second=59) or
               datetime_time(hour=0) <= datetime.now(tz=tz).time() < datetime_time(hour=9))):
            self.action = None
            self.send_message_action(f'{self.name} —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å 9:00 –¥–æ 21:00')
            return -1
        else:
            all_works = {**self.works, **self.identified_pet.works}
            if args == 'work':
                buttons = []
                for work_name in list(all_works.keys()):
                    skills = all_works.get(work_name).get('skills')
                    for skill in list(skills.keys()):
                        if skills.get(skill) > self.features.get(skill):
                            break
                    else:
                        buttons += [[get_callback_button(
                            f'{work_name}, '
                            f'{all_works.get(work_name).get("salary_per_min")}'
                            f'{"üí∞" if all_works.get(work_name).get("salary_in") == "money" else "üçé"} –≤ –º–∏–Ω',
                            'primary', {'args': f'work.{work_name}'}
                        )]]

                if not buttons:
                    answer = f'–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –¥–ª—è {self.name}'
                    keyboard = None
                else:
                    buttons += [[get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'work.back'})]]
                    answer = f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –¥–ª—è {self.name}'
                    keyboard = str(json.dumps({"one_time": True, "buttons": buttons}, ensure_ascii=False))

                vk_session.method('messages.send',
                                  {'user_id': int(self.owner_id),
                                   'message': answer,
                                   'random_id': 0, 'keyboard': keyboard})
                return -1
            elif args.startswith('work.'):
                if args == 'work.finish':
                    self.action = None
                    self.timer_action.cancel()
                    salary = round(floor((datetime.now(tz=tz) - self.time_start_action).seconds / 60) *
                                   all_works.get(self.work_name).get('salary_per_min'), 1)

                    answer = f'{self.name} –≤–µ—Ä–Ω—É–ª{"—Å—è" if self.is_male() else "a—Å—å"} —Å —Ä–∞–±–æ—Ç—ã\n' \
                             f'–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {salary}'
                    if all_works.get(self.work_name).get('salary_in') == 'money':
                        users_info[self.owner_id]["balance"] += salary
                        answer += 'üí∞'
                    else:
                        self.food += salary
                        answer += 'üçé'
                else:
                    self.work_name = args.replace('work.', '')
                    self.action = f'—Ä–∞–±–æ—Ç–∞–µ—Ç ({self.work_name})'
                    self.time_start_action = datetime.now(tz=tz)

                    now = datetime.now(tz=tz)
                    if self.features.get('work_time_night'):
                        self.time_finish_action = datetime(year=now.year, month=now.month, day=now.day, hour=9,
                                                           tzinfo=tz)
                        if now.time() <= datetime_time(hour=23, minute=59, second=59):
                            self.time_finish_action += timedelta(days=1)
                    else:
                        self.time_finish_action = datetime(year=now.year, month=now.month, day=now.day, hour=21,
                                                           tzinfo=tz)
                    self.timer_action = threading.Timer((self.time_finish_action - now).seconds,
                                                        function=self.work, args=['work.finish'])
                    self.timer_action.start()
                    answer = f'{self.name} –Ω–∞—á–∞–ª{"" if self.is_male() else "a"} —Ä–∞–±–æ—Ç–∞—Ç—å ({self.work_name})'
            else:
                answer = '–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –¥–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'

            self.send_message_action(answer)
            return -1


class Minion:
    pet: Pet
    works: dict

    def __init__(self, pet: Pet):
        self.pet = pet
        self.works = {'–ü–æ–º–æ—â–Ω–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –∑–ª–æ–¥–µ—è': {'skills': {'power': 20, 'industriousness': 70},
                                                   'salary_per_min': 1, 'salary_in': 'food'}}

    def get_action_buttons(self):
        # ['–ú–ª–∞–¥–µ–Ω—á–µ—Å—Ç–≤–æ', 60 * 60], ['–î–µ—Ç—Å—Ç–≤–æ', 60 * 60 * 5], ['–Æ–Ω–æ—Å—Ç—å', 60 * 60 * 24],
        # ['–ú–æ–ª–æ–¥–æ—Å—Ç—å', 60 * 60 * 24 * 3], ['–ó—Ä–µ–ª–æ—Å—Ç—å', 60 * 60 * 24 * 7], ['–°—Ç–∞—Ä–æ—Å—Ç—å', 0]
        buttons = []
        buttons += [[get_callback_button('–ë–∞–Ω–∞–Ω–∞!', 'primary', {'args': 'banana'})]]
        if self.pet.age >= list(self.pet.ages.keys()).index('–Æ–Ω–æ—Å—Ç—å'):
            buttons += [[get_callback_button('–°–¥–µ–ª–∞—Ç—å –≥–∞–¥–æ—Å—Ç—å', 'primary', {'args': 'vandalize'})]]

        return buttons

    def check_action(self, args):
        answer = None
        if args == 'banana':
            answer = '–ë–∞–Ω–∞–Ω–∞!'
        elif args == 'vandalize':
            answer = self.vandalize()
        return answer

    def vandalize(self):
        actions = [1, 2, 3]
        if users_info.get(self.pet.owner_id, {}).get("balance", 0) >= 5:
            actions += [0]
        if self.pet.disease is None:
            actions += [4]
        if users_info.get(self.pet.owner_id, {}).get("balance", 0) > 0:
            actions += [5]
        action = random.choice(actions)
        answer = f'{self.pet.name} '
        if action == 0:
            money = round(random.uniform(0.5, 5), 1)
            food = random.randint(1, int(money // 0.5))
            answer += f'—É–∫—Ä–∞–ª{"" if self.pet.is_male() else "a"} —É –í–∞—Å {money}üí∞ –∏ ' \
                      f'–∫—É–ø–∏–ª{"" if self.pet.is_male() else "a"} –Ω–∞ –Ω–∏—Ö {food}üçé'
            users_info[self.pet.owner_id]["balance"] -= money
            self.pet.food += food
        elif action == 1:
            pills = random.randint(1, 5)
            answer += f'—É–≥–Ω–∞–ª{"" if self.pet.is_male() else "a"} —Ñ—É—Ä–≥–æ–Ω —Å –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∞–º–∏, –Ω–æ —Ç–∞–∫ –∫–∞–∫ –≤–æ–¥–∏—Ç—å ' \
                      f'–æ–Ω{"" if self.pet.is_male() else "a"} –Ω–µ —É–º–µ–µ—Ç, –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å —Ä–∞—Å—Å—ã–ø–∞–ª–∞—Å—å –ø–æ –¥–æ—Ä–æ–≥–µ.\n' \
                      f'–°–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å —Ç–æ–ª—å–∫–æ {pills}üíä, –∏ –≤—Å–µ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ {self.pet.name} ' \
                      f'–æ—Ç–¥–∞–ª{"" if self.pet.is_male() else "a"} –í–∞–º'
            self.pet.game_pets.all_pills[self.pet.owner_id] += pills
        elif action == 2:
            food = random.randint(1, 100)
            lost = random.randint(1, food)
            lives = random.randint(5, int(self.pet.lives / 2 - 1)) if int(self.pet.lives / 2 - 1) > 5 else int(
                self.pet.lives / 2 - 1)
            self.pet.food += food - lost
            self.pet.lives -= lives
            answer += f'–Ω–∞—Ä–≤–∞–ª{"" if self.pet.is_male() else "a"} {food}üçé —Å —Å–æ—Å–µ–¥—Å–∫–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –Ω–æ ' \
                      f'—Å–ª–æ–º–∞–ª{"" if self.pet.is_male() else "a"} –≤–µ—Ç–∫—É –∏ ' \
                      f'–≥—Ä–æ—Ö–Ω—É–ª{"—Å—è" if self.pet.is_male() else "a—Å—å"}, –ø–æ—ç—Ç–æ–º—É ' \
                      f'–ø–æ—Ç–µ—Ä—è–ª{"" if self.pet.is_male() else "a"} —á–∞—Å—Ç—å —É—Ä–æ–∂–∞—è.\n' \
                      f'–î–æ–±—ã—Ç–æ: {food - lost}üçé\n' \
                      f'–°–µ–π—á–∞—Å –∂–∏–∑–Ω–µ–π: {round(self.pet.lives, 1)}'
        elif action == 3:
            count = random.randint(30, 50)
            if self.pet.food >= count:
                self.pet.food -= count
                self.pet.features['power'] = 100
                answer += f'—Å–≤–∞—Ä–∏–ª{"" if self.pet.is_male() else "a"} –∑–µ–ª—å–µ —Å–∏–ª—ã –∏–∑ {count}üçé –∏ ' \
                          f'–≤—ã–ø–∏–ª{"" if self.pet.is_male() else "a"} –µ–≥–æ.' \
                          f'–ü–æ—è–≤–∏–ª–∏—Å—å –∫–∞–∫–∏–µ-—Ç–æ —Å–∏–Ω–∏–µ –ø—è—Ç–Ω–∞, –∑–∞—Ç–æ —Å–∏–ª–∞ —É–≤–µ–ª–∏—á–∏–ª–∞—Å—å –¥–æ 100/100!\n' \
                          f'–°–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥–µ—Ä–∂–∏—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏–µ –∑–µ–ª—å—è –Ω–∏–∫—Ç–æ –Ω–µ –∑–Ω–∞–µ—Ç, –Ω–æ –ª—é–±–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ —Ç–æ—á–Ω–æ –≤–µ—Ä–Ω–µ—Ç –≤—Å–µ –∫–∞–∫ –±—ã–ª–æ'
            else:
                self.pet.food = 0
                answer += f'–ø—ã—Ç–∞–ª{"—Å—è" if self.pet.is_male() else "a—Å—å"} —Å–≤–∞—Ä–∏—Ç—å –∑–µ–ª—å–µ —Å–∏–ª—ã, –Ω–æ –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ üçé, ' \
                          f'–ø–æ—ç—Ç–æ–º—É –≤—Å–µ –≤–∑–æ—Ä–≤–∞–ª–æ—Å—å.\n' \
                          f'–ö—Å—Ç–∞—Ç–∏, –µ–¥—ã –≤ –∫–æ—Ä–º—É—à–∫–µ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –Ω–µ—Ç'
        elif action == 4:
            self.pet.disease = random.choice(list(self.pet.diseases))
            self.pet.status = f'–∑–∞–±–æ–ª–µ–ª{"" if self.pet.is_male() else "a"} ({self.pet.disease})'
            for x in self.pet.diseases.get(self.pet.disease).get('effects').items():
                self.pet.features[x[0]] -= x[1] if self.pet.features[x[0]] > x[1] else self.pet.features[x[0]]
            answer += f'—É–≤–∏–¥–µ–ª{"" if self.pet.is_male() else "a"} –∂–µ–ª—Ç—ã–π –≥—Ä–∏–±. ' \
                      f'–ü–æ–¥—É–º–∞–ª{"" if self.pet.is_male() else "a"}, —á—Ç–æ —ç—Ç–æ –±–∞–Ω–∞–Ω. ' \
                      f'–°—ä–µ–ª{"" if self.pet.is_male() else "a"} –µ–≥–æ –∏ –∑–∞–±–æ–ª–µ–ª{"" if self.pet.is_male() else "a"}. ' \
                      f'–¢–∏–ø–∏—á–Ω—ã–π –º–∏–Ω—å–æ–Ω.\n' \
                      f'–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ª–µ—á–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞, –∞ —Ç–æ –ø–æ–º—Ä–µ—Ç –µ—â–µ...'
        elif action == 5:
            if random.randint(0, 2) == 0:
                money = random.randint(1, 20)
                users_info[self.pet.owner_id]["balance"] += money
                answer += f'–≤—ã–∫–æ–ø–∞–ª{"" if self.pet.is_male() else "a"} —è–º—É –Ω–∞ –¥–æ—Ä–æ–≥–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –≤–ª–µ—Ç–µ–ª–∞ ' \
                          f'–∏–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä—Å–∫–∞—è –º–∞—à–∏–Ω–∞.\n' \
                          f'–£ –í–∞—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {money}üí∞'
            else:
                money = round(random.uniform(0, min(users_info.get(self.pet.owner_id, {}).get("balance", 0), 10)), 1)
                users_info[self.pet.owner_id]["balance"] -= money
                answer += f'–≤—ã–∫–æ–ø–∞–ª{"" if self.pet.is_male() else "a"} —è–º—É –Ω–∞ –¥–æ—Ä–æ–≥–µ, –≤ –∫–æ—Ç–æ—Ä—É—é –≤–ª–µ—Ç–µ–ª–∞ ' \
                          f'–ø–æ–ª–∏—Ü–µ–π—Å–∫–∞—è –º–∞—à–∏–Ω–∞.\n' \
                          f'–£ –í–∞—Å —à—Ç—Ä–∞—Ñ –Ω–∞ {money}üí∞'
        else:
            answer = '–ß—Ç–æ-—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å'

        return answer


class FloraColossus:
    pet: Pet
    works: dict

    def __init__(self, pet: Pet):
        self.pet = pet
        self.works = {'–†–∞–±–æ—Ç–Ω–∏–∫ Call-—Ü–µ–Ω—Ç—Ä–∞': {'skills': {'intellect': 20, 'industriousness': 30},
                                               'salary_per_min': 1, 'salary_in': 'food'}}

    def get_action_buttons(self):
        # ['–ú–ª–∞–¥–µ–Ω—á–µ—Å—Ç–≤–æ', 60 * 60], ['–î–µ—Ç—Å—Ç–≤–æ', 60 * 60 * 5], ['–Æ–Ω–æ—Å—Ç—å', 60 * 60 * 24],
        # ['–ú–æ–ª–æ–¥–æ—Å—Ç—å', 60 * 60 * 24 * 3], ['–ó—Ä–µ–ª–æ—Å—Ç—å', 60 * 60 * 24 * 7], ['–°—Ç–∞—Ä–æ—Å—Ç—å', 0]
        buttons = []
        if self.pet.age >= list(self.pet.ages.keys()).index('–î–µ—Ç—Å—Ç–≤–æ'):
            if self.pet.features.get('health') == self.pet.features.get('power') == 100:
                buttons += [
                    [get_callback_button('–í—ã—Ä–∞—Å—Ç–∏—Ç—å –µ–¥—É –Ω–∞ —Å–µ–±–µ, +20-40üçé', 'primary', {'args': 'to_small_tree'})]]
            else:
                buttons += [[get_callback_button('–°—Ç–∞—Ç—å –±–æ–ª—å—à–∏–º –¥–µ—Ä–µ–≤–æ–º, -30üçé', 'primary', {'args': 'to_big_tree'})]]

        return buttons

    def check_action(self, args):
        answer = None
        if args == 'to_big_tree':
            answer = self.change_height(to_big=True)
        elif args == 'to_small_tree':
            answer = self.change_height(to_big=False)
        return answer

    def change_height(self, to_big):
        if to_big:
            if self.pet.disease is not None:
                answer = f'{self.pet.name} –±–æ–ª–µ–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –≤—ã—Ä–∞—Å—Ç–∏'
            else:
                if self.pet.features.get('health') == self.pet.features.get('power') == 100:
                    answer = f'{self.pet.name} —É–∂–µ –±–æ–ª—å—à–æ–π'
                else:
                    if self.pet.food < 30:
                        answer = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üçé –¥–ª—è —Ä–æ—Å—Ç–∞.\n' \
                                 f'–í –∫–æ—Ä–º—É—à–∫–µ: {self.pet.food}üçé\n' \
                                 f'–¢—Ä–µ–±—É–µ—Ç—Å—è: 30üçé'
                    else:
                        self.pet.food -= 30
                        self.pet.features['health'] = 100
                        self.pet.features['power'] = 100
                        self.pet.features['speed'] = 10
                        self.pet.features['industriousness'] = 10
                        self.pet.features['neatness'] = 10
                        answer = f'{self.pet.name} —Å—Ç–∞–ª{"" if self.pet.is_male() else "a"} –±–æ–ª—å—à–µ –∏ ' \
                                 f'—É–≤–µ–ª–∏—á–∏–ª{"" if self.pet.is_male() else "a"} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –∏ —Å–∏–ª—ã –¥–æ 100/100, ' \
                                 f'–æ–¥–Ω–∞–∫–æ —Å–∫–æ—Ä–æ—Å—Ç—å, —Ç—Ä—É–¥–æ–ª—é–±–∏–µ –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å —Å—Ç–∞–ª–∏ –≤—Å–µ–≥–æ 10/100\n' \
                                 f'–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã: –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ!'

        else:
            if self.pet.disease is not None:
                answer = f'{self.pet.name} –±–æ–ª–µ–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –≤—ã—Ä–∞—â–∏–≤–∞—Ç—å –µ–¥—É'
            else:
                if self.pet.features.get('health') < 100 or self.pet.features.get('power') < 100:
                    answer = f'{self.pet.name} –º–∞–ª –¥–ª—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è –µ–¥—ã'
                else:
                    food = random.randint(20, 40)
                    self.pet.food += food
                    self.pet.features = self.pet.get_features(*self.pet.level.get(self.pet.type)[1])
                    answer = f'{self.pet.name} –≤—ã—Ä–∞—Å—Ç–∏–ª{"" if self.pet.is_male() else "a"} –Ω–∞ —Å–µ–±–µ {food}üçé, ' \
                             f'–∏–∑-–∑–∞ —á–µ–≥–æ —Å—Ç–∞–ª{"" if self.pet.is_male() else "a"} –º–µ–Ω—å—à–µ –∏ ' \
                             f'–≤–µ—Ä–Ω—É–ª{"" if self.pet.is_male() else "a"} –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ'

        return answer
