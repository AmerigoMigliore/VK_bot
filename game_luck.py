from vk_auth import vk_session, VkBotEventType
from data import users_info, change_users_info, main_keyboard
from keyboard import get_callback_button
import json
import random


class GameLuck:
    texts = None
    start_keyboard = None

    def __init__(self):
        self.texts = [
            # 0
            '–°—ã–≥—Ä–∞–π –≤ "–£–¥–∞—á—É" –∏ –≤—ã–∏–≥—Ä–∞–π –¥–∞—á—É!',
            # 1
            '–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã: –≤—ã–±–∏—Ä–∞–µ—à—å –º–∏–Ω–∏–∏–≥—Ä—É –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—à—å!\n'
            '–ù–µ –≤—Å–µ–≥–¥–∞, –∫–æ–Ω–µ—á–Ω–æ, –Ω–æ, –Ω–∞–¥–µ—é—Å—å, —á–∞—Å—Ç–æ!\n'
            '–£ –∫–∞–∂–¥–æ–π –º–∏–Ω–∏–∏–≥—Ä—ã —Å–≤–æ–∏ –ø—Ä–∞–≤–∏–ª–∞ - –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –º–µ–Ω—é –º–∏–Ω–∏–∏–≥—Ä—ã.\n'
            '–ß–∏—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ, –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—Å–∫–∞–π, –∏ —Ç–æ–≥–¥–∞ —É–¥–∞—á–∞ –±—É–¥–µ—Ç –Ω–∞ —Ç–≤–æ–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!\n'
            '–ï—Å–ª–∏ –≤—Å–µ –ø–æ–Ω—è—Ç–Ω–æ - –∂–º–∏ –Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"\n'
            'P.S. –£—á–∞—Å—Ç–∏–µ –ø–ª–∞—Ç–Ω–æ–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞ üí∞üí∞üí∞. –ò—Ö –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–∞—Ö.'
        ]
        self.start_keyboard = str(json.dumps(
            {
                "one_time": True,
                "buttons": [
                    [get_callback_button('–ü—Ä–∞–≤–∏–ª–∞', 'primary', {'args': 'rules'}),
                     get_callback_button('–ù–∞—á–∞—Ç—å', 'positive', {'args': 'choose_lottery'})],
                    # [get_callback_button('–ú–∞–≥–∞–∑–∏–Ω', 'secondary', {'args': 'store'})],
                    [get_callback_button('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É', 'negative', {'args': 'back'})]
                ]
            },
            ensure_ascii=False))

    def process_event(self, event):
        """ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"

        :param event: —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–∏—à–µ–¥—à–µ–µ –≤ VkBotLongPoll
        :type event: :class:`Event`
        """
        if event is None:
            return

        if event.type == VkBotEventType.MESSAGE_EVENT:
            user_id = str(event.obj.user_id)

            method = users_info.get(user_id, {}).get('method')
            args = event.obj.payload.get('args')

            if method == 'start':
                if args == 'rules':
                    self.get_rules(user_id)
                elif args == 'choose_lottery':
                    self.choose_lottery(user_id, args)
                elif args == 'store':
                    pass
                elif args == 'back':
                    vk_session.method('messages.send',
                                      {'user_id': int(user_id),
                                       'message': '–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π —É–¥–∞—á–Ω—ã–π –¥–µ–Ω—å! –ü—Ä–∏—Ö–æ–¥–∏ –µ—â–µ!',
                                       'random_id': 0, 'keyboard': main_keyboard})
                    change_users_info(user_id, 'autoresponder')
                    return

            elif method == 'choose_lottery':
                self.choose_lottery(user_id, args)

            elif method == 'random_number':
                self.random_number(user_id, args)

            elif method == 'three_out_of_nine':
                self.three_out_of_nine(user_id, args)

            vk_session.method('messages.sendMessageEventAnswer',
                              {'event_id': event.obj.event_id,
                               'user_id': int(user_id),
                               'peer_id': event.obj.peer_id})

        elif event.type == VkBotEventType.MESSAGE_NEW:
            user_id = str(event.obj.from_id)
            message = event.obj.text.lower()
            method = users_info.get(user_id, {}).get('method', None)
            args = users_info.get(user_id, {}).get('args', None)

            if method == 'random_number':
                self.random_number(user_id, args, message)

    def start(self, user_id):
        user_id = str(user_id)

        vk_session.method('messages.send',
                          {'user_id': int(user_id),
                           'message': f'{self.texts[0]}\n'
                                      f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n',
                           'random_id': 0, 'keyboard': self.start_keyboard})
        change_users_info(user_id, new_method='start')

    def get_rules(self, user_id):
        if users_info.get(user_id, {}).get('method') == 'start':
            keyboard = self.start_keyboard
        else:
            keyboard = None

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': self.texts[1],
                           'random_id': 0, 'keyboard': keyboard})

    def choose_lottery(self, user_id, args=None):
        if args == 'back':
            change_users_info(user_id, new_method='start')
            self.start(user_id)
            return
        elif args == 'random_number':
            change_users_info(user_id, new_method=args)
            self.random_number(user_id)
            return
        elif args == 'three_out_of_nine':
            change_users_info(user_id, new_method=args)
            self.three_out_of_nine(user_id)
            return
        else:
            keyboard = str(json.dumps(
                {
                    'inline': False,
                    'one_time': True,
                    'buttons': [
                        [get_callback_button('–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ', 'positive', {'args': 'random_number'})],
                        [get_callback_button('3 –∏–∑ 9', 'positive', {'args': 'three_out_of_nine'})],
                        [get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]
                    ]
                },
                ensure_ascii=False))

            message = '~–ß–µ—Å—Ç–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏~\n\n' \
                      '–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É.\n' \
                      '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"'

            change_users_info(user_id, new_method='choose_lottery')

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': message,
                           'random_id': 0,
                           'keyboard': keyboard})

    def random_number(self, user_id, args=None, number=None):
        keyboard = None

        if args == 'back':
            change_users_info(user_id, new_method='choose_lottery')
            self.choose_lottery(user_id)
            return

        elif args == 'rules':
            message = '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ".\n' \
                      '–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 999. ' \
                      '–¢—ã, –ø—ã—Ç–∞—è—Å—å —É–≥–∞–¥–∞—Ç—å —ç—Ç–æ —á–∏—Å–ª–æ, –Ω–∞–∑—ã–≤–∞–µ—à—å —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 999. ' \
                      '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–µ–º–µ:\n\n' \
                      '–£–≥–∞–¥–∞–Ω–æ:\n' \
                      '3 —Ü–∏—Ñ—Ä—ã –∏–∑ 3 –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö - 10üí∞\n' \
                      '2 —Ü–∏—Ñ—Ä—ã –∏–∑ 3 –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö - 5üí∞\n' \
                      '3 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ —Ç–æ–ª—å–∫–æ 1 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ - 4üí∞\n' \
                      '2 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ —Ç–æ–ª—å–∫–æ 1 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ - 3üí∞\n' \
                      '1 —Ü–∏—Ñ—Ä—É –∏–∑ 3 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ - 2üí∞\n' \
                      '3 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ - 2üí∞\n\n' \
                      '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 1üí∞'

        elif args == 'play':
            number = number.strip() if number is not None else None

            if number is not None and number.isdigit() and 100 <= int(number) <= 999:
                users_info[user_id]['balance'] -= 1
                answer = str(random.randint(100, 999))

                if number == answer:
                    users_info[user_id]['balance'] += 10
                    message = f'–ë—Ä–∞–≤–æ! –í—ã —É–≥–∞–¥–∞–ª–∏ –º–æ–µ —á–∏—Å–ª–æ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 10üí∞!\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                elif (number[0] == answer[0] and (number[1] == answer[1] or number[2] == answer[2])) or \
                        (number[1] == answer[1] and number[2] == answer[2]):
                    users_info[user_id]['balance'] += 5
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–í—ã —É–≥–∞–¥–∞–ª–∏ 2 —Ü–∏—Ñ—Ä—ã –∏–∑ 3 –Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 5üí∞\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                elif set(number) == set(answer) and \
                        (number[0] == answer[0] or number[1] == answer[1] or number[2] == answer[2]):
                    users_info[user_id]['balance'] += 4
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–í—ã —É–≥–∞–¥–∞–ª–∏ 3 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ —Ç–æ–ª—å–∫–æ 1 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 4üí∞\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                elif (number[0] == answer[0] and (number[1] == answer[2] or number[2] == answer[1])) or \
                        (number[1] == answer[1] and (number[0] == answer[2] or number[2] == answer[0])) or \
                        (number[2] == answer[2] and (number[0] == answer[1] or number[1] == answer[0])):
                    users_info[user_id]['balance'] += 3
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–í—ã —É–≥–∞–¥–∞–ª–∏ 2 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ —Ç–æ–ª—å–∫–æ 1 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 3üí∞\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                elif number[0] == answer[0] or number[1] == answer[1] or number[2] == answer[2]:
                    users_info[user_id]['balance'] += 2
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–í—ã —É–≥–∞–¥–∞–ª–∏ 1 —Ü–∏—Ñ—Ä—É –∏–∑ 3 –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 2üí∞\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                elif set(number) == set(answer):
                    users_info[user_id]['balance'] += 2
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–í—ã —É–≥–∞–¥–∞–ª–∏ 3 —Ü–∏—Ñ—Ä—ã –∏–∑ 3, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ, –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ 2üí∞\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                else:
                    message = f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ "{answer}".\n' \
                              f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª–∏, –Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –í–∞–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑–µ—Ç!\n' \
                              f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

                change_users_info(user_id, new_method='random_number')

            elif users_info.get(user_id, {}).get('balance', 0) >= 1:
                change_users_info(user_id, new_method='random_number', new_args='play')
                message = '–ù–∞–∑–æ–≤–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 100 –¥–æ 999'

            else:
                message = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –∏–≥—Ä—ã\n' \
                          f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'
                change_users_info(user_id, new_method='random_number')

        else:
            keyboard = str(json.dumps(
                {
                    'inline': False,
                    'one_time': False,
                    'buttons': [
                        [get_callback_button('–ò–≥—Ä–∞—Ç—å (1üí∞)', 'positive', {'args': 'play'})],
                        [get_callback_button('–ü—Ä–∞–≤–∏–ª–∞', 'primary', {'args': 'rules'}),
                         get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]
                    ]
                },
                ensure_ascii=False))

            message = '~–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ~\n\n' \
                      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n' \
                      '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"'

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': message,
                           'random_id': 0,
                           'keyboard': keyboard})

    def three_out_of_nine(self, user_id, args=None):
        keyboard = str(json.dumps(
            {
                'inline': False,
                'one_time': False,
                'buttons': [
                    [get_callback_button('–ò–≥—Ä–∞—Ç—å (1üí∞)', 'positive', {'args': 'play'})],
                    [get_callback_button('–ü—Ä–∞–≤–∏–ª–∞', 'primary', {'args': 'rules'}),
                     get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': 'back'})]
                ]
            },
            ensure_ascii=False))

        if args == 'back':
            change_users_info(user_id, new_method='choose_lottery')
            self.choose_lottery(user_id)
            return

        elif args == 'rules':
            message = '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã "3 –∏–∑ 9".\n' \
                      '–Ø –∑–∞–≥–∞–¥—ã–≤–∞—é 3 —Ä–∞–∑–Ω—ã—Ö —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 9. ' \
                      '–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—è—Å–Ω–∏—Ç—å, –∫–∞–∫–∏–µ 3 —á–∏—Å–ª–∞ —è –∑–∞–≥–∞–¥–∞–ª, –≤—ã–±–∏—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ. ' \
                      '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ö–µ–º–µ:\n\n' \
                      '–£–≥–∞–¥–∞–Ω–æ:\n' \
                      '3 —á–∏—Å–ª–∞ –∏–∑ 3 - 5üí∞\n' \
                      '2 —á–∏—Å–ª–∞ –∏–∑ 3 - 3üí∞\n' \
                      '1 —á–∏—Å–ª–æ –∏–∑ 3 - 2üí∞\n\n' \
                      '–°—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã: 1üí∞'

        elif args == 'play':
            if users_info.get(user_id, {}).get('balance', 0) >= 1:
                users_info[user_id]['balance'] -= 1

                users_info[user_id]['args'] = {}
                users_info[user_id]['args']['play'] = True
                users_info[user_id]['args']['keyboard'] = ['secondary'] * 9
                users_info[user_id]['args']['answer'] = random.sample(range(1, 10), 3)
                users_info[user_id]['args']['count'] = 0

                message = '–Ø –∑–∞–≥–∞–¥–∞–ª 3 —á–∏—Å–ª–∞. –í—ã–±–æ—Ä –∑–∞ —Ç–æ–±–æ–π!'
                keyboard = self.get_keyboard(user_id)

            else:
                message = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ üí∞ –¥–ª—è –∏–≥—Ä—ã\n' \
                          f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'

        elif users_info.get(user_id, {}).get('args', {}) is not None and \
                users_info.get(user_id, {}).get('args', {}).get('play', False) and str(args).isdigit():
            if users_info[user_id]['args']['keyboard'][args - 1] != 'secondary':
                message = f'–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ {args}.'
            else:
                users_info[user_id]['args']['count'] += 1
                if args in users_info[user_id]['args']['answer']:
                    message = f'–£—Ä–∞! –ß–∏—Å–ª–æ "{args}" –µ—Å—Ç—å –≤ –º–æ–µ–º —Å–ø–∏—Å–∫–µ!'
                    users_info[user_id]['args']['keyboard'][args - 1] = 'positive'
                else:
                    message = f'–≠—Ö.. –ß–∏—Å–ª–∞ "{args}" –Ω–µ—Ç –≤ –º–æ–µ–º —Å–ø–∏—Å–∫–µ!'
                    users_info[user_id]['args']['keyboard'][args - 1] = 'negative'

            keyboard = self.get_keyboard(user_id)

            if users_info[user_id]['args']['count'] == 3:
                count = users_info[user_id]['args']['keyboard'].count('positive')
                answer = users_info[user_id]['args']['answer']
                message += f'\n\n–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.\n' \
                           f'–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–∞ "{answer[0]}, {answer[1]}, {answer[2]}"\n'
                if count == 3:
                    users_info[user_id]['balance'] += 5
                    message += f'–£–≥–∞–¥–∞–Ω–æ 3 —á–∏—Å–ª–∞ –∏–∑ 3.\n –í—ã–∏–≥—Ä—ã—à: 5üí∞\n'
                elif count == 2:
                    users_info[user_id]['balance'] += 3
                    message += f'–£–≥–∞–¥–∞–Ω–æ 2 —á–∏—Å–ª–∞ –∏–∑ 3.\n –í—ã–∏–≥—Ä—ã—à: 3üí∞\n'
                elif count == 1:
                    users_info[user_id]['balance'] += 2
                    message += f'–£–≥–∞–¥–∞–Ω–æ 1 —á–∏—Å–ª–æ –∏–∑ 3.\n –í—ã–∏–≥—Ä—ã—à: 2üí∞\n'
                else:
                    message += f'–£–≤—ã, –Ω–∏ –æ–¥–Ω–æ —á–∏—Å–ª–æ –Ω–µ —É–≥–∞–¥–∞–Ω–æ.\n'

                message += f'–í–∞—à –±–∞–ª–∞–Ω—Å: {users_info.get(user_id, {}).get("balance", 0)}üí∞\n'
                users_info[user_id]['args'] = None

        else:
            message = '~3 –∏–∑ 9~\n\n' \
                      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.\n' \
                      '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"'

        vk_session.method('messages.send',
                          {'user_id': int(user_id), 'message': message,
                           'random_id': 0,
                           'keyboard': keyboard})

    @staticmethod
    def get_keyboard(user_id):
        keyboard = {
            'inline': False,
            'one_time': False,
            'buttons': [[], [], []]
        }

        if users_info.get(user_id, {}).get('args', {}).get('keyboard', None) is None:
            return None

        for i, c in enumerate(users_info[user_id]['args']['keyboard']):
            keyboard['buttons'][i // 3] += [get_callback_button(i+1, c, {'args': i+1})]

        if users_info[user_id]['args']['keyboard'].count('secondary') == 6:
            keyboard['buttons'] += [[get_callback_button('–ù–∞–∑–∞–¥', 'negative', {'args': ''})]]

        return str(json.dumps(keyboard, ensure_ascii=False))
